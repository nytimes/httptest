pipeline:
  name: httptest
  identifier: httptest
  projectIdentifier: nytimes__devp_appdelivery_harness_test
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.nytimesOrgGhConnector
        repoName: httptest
        build: <+input>
        sparseCheckout: []
  stages:
    - stage:
        identifier: default
        name: default
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  identifier: gotest
                  name: gotest
                  spec:
                    connectorRef: account.harnessImage
                    image: golang:alpine
                    shell: Sh
                    command: go run gotest.tools/gotestsum@latest --junitfile report.xml
                    reports:
                      type: JUnit
                      spec:
                        paths:
                          - report.xml
                    envVariables:
                      CGO_ENABLED: "0"
                      GOOS: linux
                  timeout: ""
                  type: Run
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Retry
                          spec:
                            retryCount: 1
                            retryIntervals:
                              - 5s
                            onRetryFailure:
                              action:
                                type: Abort
              - step:
                  identifier: build
                  name: build
                  spec:
                    connectorRef: account.harnessImage
                    image: golang:alpine
                    shell: Sh
                    command: go build
                    envVariables:
                      CGO_ENABLED: "0"
                      GOOS: linux
                  timeout: ""
                  type: Run
                  when:
                    stageStatus: Success
              - step:
                  identifier: httptest
                  name: httptest
                  spec:
                    connectorRef: account.harnessImage
                    image: golang:alpine
                    shell: Sh
                    command: ./httptest
                    envVariables:
                      TEST_DIRECTORY: example-tests
                      TEST_ENV: dev
                      TEST_HOST: httpbin.org
                  timeout: ""
                  type: Run
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Retry
                          spec:
                            retryCount: 3
                            retryIntervals:
                              - 5s
                            onRetryFailure:
                              action:
                                type: Abort
                  when:
                    stageStatus: Success
              - step:
                  identifier: publish
                  name: publish
                  type: BuildAndPushECR
                  spec:
                    connectorRef: dvCdDevAwsConnector
                    region: us-east-1
                    account: "552276524664"
                    imageName: httptest
                    envVariables:
                      PLUGIN_PLATFORM: linux/<+matrix.arch>
                      TARGETARCH: <+matrix.arch>
                    tags:
                      - dev-<+matrix.arch>
                      - <+codebase.shortCommitSha>-<+matrix.arch>
                    when:
                      stageStatus: Success
              # - step:
              #     identifier: create_manifest
              #     name: Create Manifest
              #     type: Run
              #     spec:
              #       connectorRef: dvCdDevAwsConnector
              #       image: docker:latest
              #       shell: Sh
              #       command: |
              #         # step 0 store the output of `aws ecr get-login-password --region` in a variable that we can access in this pipeline...
              #         echo $password | docker login --username AWS --password-stdin 552276524664.dkr.ecr.us-east-1.amazonaws.com
              #         docker manifest create 552276524664.dkr.ecr.us-east-1.amazonaws.com/httptest:dev \
              #         --amend 52276524664.dkr.ecr.us-east-1.amazonaws.com/httptest:dev-amd64 \
              #         --amend 552276524664.dkr.ecr.us-east-1.amazonaws.com/httptest:dev-arm64
              #         docker manifest push --purge 552276524664.dkr.ecr.us-east-1.amazonaws.com/httptest:dev
              #       when:
              #         stageStatus: Success
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: account.kubernetesclusterconnector
              namespace: dv-cd
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          matrix:
            arch: ["amd64", "arm64"]
        type: CI
